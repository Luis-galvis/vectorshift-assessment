{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lgalv\\\\Desktop\\\\integrations_technical_assessment\\\\frontend\\\\src\\\\integrations\\\\hubspot.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HubspotIntegration = ({\n  setIntegrationParams,\n  user,\n  org\n}) => {\n  _s();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const handleConnect = () => {\n    setIsConnecting(true);\n\n    // Abrir ventana de autenticación\n    const authWindow = window.open(`http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`, 'HubSpotAuth', 'width=600,height=700,toolbar=0,scrollbars=0');\n\n    // Listener para mensaje de éxito\n    const messageHandler = event => {\n      if (event.data.type === 'hubspot-auth-success') {\n        // Obtener credenciales automáticamente\n        fetchCredentials(event.data.user_id, event.data.org_id);\n        window.removeEventListener('message', messageHandler);\n      }\n    };\n    window.addEventListener('message', messageHandler);\n\n    // Verificar cierre de ventana\n    const checkWindow = setInterval(() => {\n      if (authWindow.closed) {\n        clearInterval(checkWindow);\n        setIsConnecting(false);\n      }\n    }, 500);\n  };\n  const fetchCredentials = async (user, org) => {\n    try {\n      const response = await fetch(`http://localhost:8000/integrations/hubspot/credentials?user_id=${user}&org_id=${org}`);\n      const credentials = await response.json();\n      setIntegrationParams({\n        credentials: credentials.access_token,\n        type: 'HubSpot'\n      });\n    } catch (error) {\n      console.error('Error fetching credentials:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleConnect,\n      disabled: isConnecting,\n      startIcon: isConnecting && /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 44\n      }, this),\n      children: isConnecting ? 'Conectando...' : 'Conectar con HubSpot'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(HubspotIntegration, \"wFTzW8g/nX5ciJ7yP5KH8paCcIk=\");\n_c = HubspotIntegration;\nexport const HubspotConfig = {\n  name: 'HubSpot',\n  slug: 'hubspot',\n  authorizeUrl: '/integrations/hubspot/authorize'\n};\nvar _c;\n$RefreshReg$(_c, \"HubspotIntegration\");","map":{"version":3,"names":["useState","Box","Button","CircularProgress","jsxDEV","_jsxDEV","HubspotIntegration","setIntegrationParams","user","org","_s","isConnecting","setIsConnecting","handleConnect","authWindow","window","open","messageHandler","event","data","type","fetchCredentials","user_id","org_id","removeEventListener","addEventListener","checkWindow","setInterval","closed","clearInterval","response","fetch","credentials","json","access_token","error","console","sx","mt","children","variant","onClick","disabled","startIcon","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","HubspotConfig","name","slug","authorizeUrl","$RefreshReg$"],"sources":["C:/Users/lgalv/Desktop/integrations_technical_assessment/frontend/src/integrations/hubspot.js"],"sourcesContent":["import { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nexport const HubspotIntegration = ({ setIntegrationParams, user, org }) => {\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n\r\n    const handleConnect = () => {\r\n        setIsConnecting(true);\r\n        \r\n        // Abrir ventana de autenticación\r\n        const authWindow = window.open(\r\n            `http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`,\r\n            'HubSpotAuth',\r\n            'width=600,height=700,toolbar=0,scrollbars=0'\r\n        );\r\n\r\n        // Listener para mensaje de éxito\r\n        const messageHandler = (event) => {\r\n            if (event.data.type === 'hubspot-auth-success') {\r\n                // Obtener credenciales automáticamente\r\n                fetchCredentials(event.data.user_id, event.data.org_id);\r\n                window.removeEventListener('message', messageHandler);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('message', messageHandler);\r\n\r\n        // Verificar cierre de ventana\r\n        const checkWindow = setInterval(() => {\r\n            if (authWindow.closed) {\r\n                clearInterval(checkWindow);\r\n                setIsConnecting(false);\r\n            }\r\n        }, 500);\r\n    };\r\n\r\n    const fetchCredentials = async (user, org) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://localhost:8000/integrations/hubspot/credentials?user_id=${user}&org_id=${org}`\r\n            );\r\n            const credentials = await response.json();\r\n            setIntegrationParams({\r\n                credentials: credentials.access_token,\r\n                type: 'HubSpot'\r\n            });\r\n        } catch (error) {\r\n            console.error('Error fetching credentials:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ mt: 2 }}>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleConnect}\r\n                disabled={isConnecting}\r\n                startIcon={isConnecting && <CircularProgress size={20} />}\r\n            >\r\n                {isConnecting ? 'Conectando...' : 'Conectar con HubSpot'}\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\nexport const HubspotConfig = {\r\n    name: 'HubSpot',\r\n    slug: 'hubspot',\r\n    authorizeUrl: '/integrations/hubspot/authorize'\r\n};"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACIC,GAAG,EACHC,MAAM,EACNC,gBAAgB,QACb,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,OAAO,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,oBAAoB;EAAEC,IAAI;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMa,aAAa,GAAGA,CAAA,KAAM;IACxBD,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA,MAAME,UAAU,GAAGC,MAAM,CAACC,IAAI,CACzB,gEAA+DR,IAAK,WAAUC,GAAI,EAAC,EACpF,aAAa,EACb,6CACJ,CAAC;;IAED;IACA,MAAMQ,cAAc,GAAIC,KAAK,IAAK;MAC9B,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,KAAK,sBAAsB,EAAE;QAC5C;QACAC,gBAAgB,CAACH,KAAK,CAACC,IAAI,CAACG,OAAO,EAAEJ,KAAK,CAACC,IAAI,CAACI,MAAM,CAAC;QACvDR,MAAM,CAACS,mBAAmB,CAAC,SAAS,EAAEP,cAAc,CAAC;MACzD;IACJ,CAAC;IAEDF,MAAM,CAACU,gBAAgB,CAAC,SAAS,EAAER,cAAc,CAAC;;IAElD;IACA,MAAMS,WAAW,GAAGC,WAAW,CAAC,MAAM;MAClC,IAAIb,UAAU,CAACc,MAAM,EAAE;QACnBC,aAAa,CAACH,WAAW,CAAC;QAC1Bd,eAAe,CAAC,KAAK,CAAC;MAC1B;IACJ,CAAC,EAAE,GAAG,CAAC;EACX,CAAC;EAED,MAAMS,gBAAgB,GAAG,MAAAA,CAAOb,IAAI,EAAEC,GAAG,KAAK;IAC1C,IAAI;MACA,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CACvB,kEAAiEvB,IAAK,WAAUC,GAAI,EACzF,CAAC;MACD,MAAMuB,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACzC1B,oBAAoB,CAAC;QACjByB,WAAW,EAAEA,WAAW,CAACE,YAAY;QACrCd,IAAI,EAAE;MACV,CAAC,CAAC;IACN,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED,oBACI9B,OAAA,CAACJ,GAAG;IAACoC,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,eACflC,OAAA,CAACH,MAAM;MACHsC,OAAO,EAAC,WAAW;MACnBC,OAAO,EAAE5B,aAAc;MACvB6B,QAAQ,EAAE/B,YAAa;MACvBgC,SAAS,EAAEhC,YAAY,iBAAIN,OAAA,CAACF,gBAAgB;QAACyC,IAAI,EAAE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAT,QAAA,EAEzD5B,YAAY,GAAG,eAAe,GAAG;IAAsB;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACtC,EAAA,CA5DWJ,kBAAkB;AAAA2C,EAAA,GAAlB3C,kBAAkB;AA6D/B,OAAO,MAAM4C,aAAa,GAAG;EACzBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;AAClB,CAAC;AAAC,IAAAJ,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}