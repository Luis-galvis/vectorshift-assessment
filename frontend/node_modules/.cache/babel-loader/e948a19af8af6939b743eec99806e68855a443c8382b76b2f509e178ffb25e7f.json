{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lgalv\\\\Desktop\\\\integrations_technical_assessment\\\\frontend\\\\src\\\\integrations\\\\hubspot.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HubspotIntegration = ({\n  user,\n  org,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n\n      // 1. Obtener URL de autorización desde el backend\n      const authResponse = await fetch(`http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`);\n      if (!authResponse.ok) {\n        const error = await authResponse.json();\n        throw new Error(error.detail || 'Error al obtener URL de autorización');\n      }\n      const {\n        auth_url\n      } = await authResponse.json();\n\n      // 2. Abrir ventana de autenticación directamente\n      const authWindow = window.open(auth_url, 'HubSpot Auth', 'width=600,height=600,toolbar=0,location=0');\n\n      // 3. Verificar cierre de ventana y obtener credenciales\n      const checkClosedWindow = setInterval(() => {\n        if (authWindow !== null && authWindow !== void 0 && authWindow.closed) {\n          clearInterval(checkClosedWindow);\n          checkCredentials();\n        }\n      }, 500);\n    } catch (error) {\n      console.error('Error de conexión:', error);\n      setIsConnecting(false);\n    }\n  };\n  const checkCredentials = async () => {\n    try {\n      const response = await fetch(`http://localhost:8000/integrations/hubspot/credentials?user_id=${user}&org_id=${org}`);\n      if (!response.ok) {\n        throw new Error('Error al obtener credenciales');\n      }\n      const credentials = await response.json();\n      setIntegrationParams({\n        credentials: credentials.access_token,\n        type: 'HubSpot'\n      });\n      setIsConnected(true);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleConnect,\n        disabled: isConnecting || isConnected,\n        color: isConnected ? 'success' : 'primary',\n        startIcon: isConnecting && /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 48\n        }, this),\n        children: isConnected ? 'Conectado a HubSpot' : isConnecting ? 'Conectando...' : 'Conectar con HubSpot'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(HubspotIntegration, \"WD2YJOlxQtU8NjiZHP5ODHeC/nM=\");\n_c = HubspotIntegration;\nexport const HubspotConfig = {\n  name: 'HubSpot',\n  slug: 'hubspot',\n  authorizeUrl: '/integrations/hubspot/authorize'\n};\nvar _c;\n$RefreshReg$(_c, \"HubspotIntegration\");","map":{"version":3,"names":["useState","Box","Button","CircularProgress","jsxDEV","_jsxDEV","HubspotIntegration","user","org","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnect","authResponse","fetch","ok","error","json","Error","detail","auth_url","authWindow","window","open","checkClosedWindow","setInterval","closed","clearInterval","checkCredentials","console","response","credentials","access_token","type","sx","mt","children","display","alignItems","justifyContent","variant","onClick","disabled","color","startIcon","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","HubspotConfig","name","slug","authorizeUrl","$RefreshReg$"],"sources":["C:/Users/lgalv/Desktop/integrations_technical_assessment/frontend/src/integrations/hubspot.js"],"sourcesContent":["import { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nexport const HubspotIntegration = ({ user, org, setIntegrationParams }) => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n\r\n    const handleConnect = async () => {\r\n        try {\r\n            setIsConnecting(true);\r\n            \r\n            // 1. Obtener URL de autorización desde el backend\r\n            const authResponse = await fetch(\r\n                `http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`\r\n            );\r\n\r\n            if (!authResponse.ok) {\r\n                const error = await authResponse.json();\r\n                throw new Error(error.detail || 'Error al obtener URL de autorización');\r\n            }\r\n\r\n            const { auth_url } = await authResponse.json();\r\n            \r\n            // 2. Abrir ventana de autenticación directamente\r\n            const authWindow = window.open(\r\n                auth_url, \r\n                'HubSpot Auth', \r\n                'width=600,height=600,toolbar=0,location=0'\r\n            );\r\n\r\n            // 3. Verificar cierre de ventana y obtener credenciales\r\n            const checkClosedWindow = setInterval(() => {\r\n                if (authWindow?.closed) {\r\n                    clearInterval(checkClosedWindow);\r\n                    checkCredentials();\r\n                }\r\n            }, 500);\r\n\r\n        } catch (error) {\r\n            console.error('Error de conexión:', error);\r\n            setIsConnecting(false);\r\n        }\r\n    };\r\n\r\n    const checkCredentials = async () => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://localhost:8000/integrations/hubspot/credentials?user_id=${user}&org_id=${org}`\r\n            );\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Error al obtener credenciales');\r\n            }\r\n\r\n            const credentials = await response.json();\r\n            setIntegrationParams({\r\n                credentials: credentials.access_token,\r\n                type: 'HubSpot'\r\n            });\r\n            setIsConnected(true);\r\n\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        } finally {\r\n            setIsConnecting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ mt: 2 }}>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleConnect}\r\n                    disabled={isConnecting || isConnected}\r\n                    color={isConnected ? 'success' : 'primary'}\r\n                    startIcon={isConnecting && <CircularProgress size={20} />}\r\n                >\r\n                    {isConnected ? 'Conectado a HubSpot' : \r\n                    isConnecting ? 'Conectando...' : 'Conectar con HubSpot'}\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const HubspotConfig = {\r\n    name: 'HubSpot',\r\n    slug: 'hubspot',\r\n    authorizeUrl: '/integrations/hubspot/authorize'\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}