{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lgalv\\\\Desktop\\\\integrations_technical_assessment\\\\frontend\\\\src\\\\integrations\\\\hubspot.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HubspotIntegration = ({\n  user,\n  org,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.data.type === 'hubspot-auth-success') {\n        handleAuthSuccess(event.data.user_id, event.data.org_id);\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, []);\n  const handleConnect = () => {\n    setIsConnecting(true);\n    const authWindow = window.open(`http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`, 'HubSpotAuth', 'width=600,height=700');\n    const checkWindow = setInterval(() => {\n      if (authWindow.closed) {\n        clearInterval(checkWindow);\n        if (!isConnected) setIsConnecting(false);\n      }\n    }, 500);\n  };\n  const handleAuthSuccess = async (userId, orgId) => {\n    try {\n      const response = await fetch(`http://localhost:8000/integrations/hubspot/credentials?user_id=${userId}&org_id=${orgId}`);\n      const credentials = await response.json();\n      setIntegrationParams({\n        credentials: credentials.access_token,\n        type: 'HubSpot'\n      });\n      setIsConnected(true);\n      loadContacts(userId, orgId);\n    } catch (error) {\n      console.error('Error:', error);\n      setIsConnecting(false);\n    }\n  };\n  const loadContacts = async (userId, orgId) => {\n    try {\n      const response = await fetch(`http://localhost:8000/integrations/hubspot/items?user_id=${userId}&org_id=${orgId}`);\n      const contacts = await response.json();\n      console.log('Contactos de HubSpot:', contacts);\n    } catch (error) {\n      console.error('Error cargando contactos:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleConnect,\n      disabled: isConnecting || isConnected,\n      color: isConnected ? 'success' : 'primary',\n      startIcon: isConnecting && /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 44\n      }, this),\n      children: isConnected ? 'Conectado ✓' : isConnecting ? 'Conectando...' : 'Conectar HubSpot'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(HubspotIntegration, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = HubspotIntegration;\nexport const HubspotConfig = {\n  name: 'HubSpot',\n  slug: 'hubspot',\n  authorizeUrl: '/integrations/hubspot/authorize'\n};\nvar _c;\n$RefreshReg$(_c, \"HubspotIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","jsxDEV","_jsxDEV","HubspotIntegration","user","org","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleMessage","event","data","type","handleAuthSuccess","user_id","org_id","window","addEventListener","removeEventListener","handleConnect","authWindow","open","checkWindow","setInterval","closed","clearInterval","userId","orgId","response","fetch","credentials","json","access_token","loadContacts","error","console","contacts","log","sx","mt","children","variant","onClick","disabled","color","startIcon","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","HubspotConfig","name","slug","authorizeUrl","$RefreshReg$"],"sources":["C:/Users/lgalv/Desktop/integrations_technical_assessment/frontend/src/integrations/hubspot.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Box, Button, CircularProgress } from '@mui/material';\r\n\r\nexport const HubspotIntegration = ({ user, org, setIntegrationParams }) => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleMessage = (event) => {\r\n            if (event.data.type === 'hubspot-auth-success') {\r\n                handleAuthSuccess(event.data.user_id, event.data.org_id);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('message', handleMessage);\r\n        return () => window.removeEventListener('message', handleMessage);\r\n    }, []);\r\n\r\n    const handleConnect = () => {\r\n        setIsConnecting(true);\r\n        const authWindow = window.open(\r\n            `http://localhost:8000/integrations/hubspot/authorize?user_id=${user}&org_id=${org}`,\r\n            'HubSpotAuth',\r\n            'width=600,height=700'\r\n        );\r\n\r\n        const checkWindow = setInterval(() => {\r\n            if (authWindow.closed) {\r\n                clearInterval(checkWindow);\r\n                if (!isConnected) setIsConnecting(false);\r\n            }\r\n        }, 500);\r\n    };\r\n\r\n    const handleAuthSuccess = async (userId, orgId) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://localhost:8000/integrations/hubspot/credentials?user_id=${userId}&org_id=${orgId}`\r\n            );\r\n            const credentials = await response.json();\r\n            \r\n            setIntegrationParams({\r\n                credentials: credentials.access_token,\r\n                type: 'HubSpot'\r\n            });\r\n            \r\n            setIsConnected(true);\r\n            loadContacts(userId, orgId);\r\n            \r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setIsConnecting(false);\r\n        }\r\n    };\r\n\r\n    const loadContacts = async (userId, orgId) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://localhost:8000/integrations/hubspot/items?user_id=${userId}&org_id=${orgId}`\r\n            );\r\n            const contacts = await response.json();\r\n            console.log('Contactos de HubSpot:', contacts);\r\n        } catch (error) {\r\n            console.error('Error cargando contactos:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ mt: 2 }}>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleConnect}\r\n                disabled={isConnecting || isConnected}\r\n                color={isConnected ? 'success' : 'primary'}\r\n                startIcon={isConnecting && <CircularProgress size={20} />}\r\n            >\r\n                {isConnected ? 'Conectado ✓' : isConnecting ? 'Conectando...' : 'Conectar HubSpot'}\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const HubspotConfig = {\r\n    name: 'HubSpot',\r\n    slug: 'hubspot',\r\n    authorizeUrl: '/integrations/hubspot/authorize'\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}